modemSide = nil
modem = nil
stargates = {}
gateName = nil
config = {
    FUEL_WARNING_THRESHOLD = 20,
    RETRY_ATTEMPTS = 5,
    RETRY_DELAY = 2,
    gateNames = {},
    gateGroups = {},
    gatePositions = {},
    MODEM_SIDE = "back",
    MAX_GATES = 20,
    SYNC_INTERVAL = 0.5,
    DIAL_WAIT = 0.5,
    DEFAULT_ADDRESSES = {["Earth"] = {code = "ABC123", isTrusted = true, tag = "Allies"}},
    MAX_RECENT_ADDRESSES = 10,
    UI_COLORS = {borders = colors.blue, buttons = colors.blue, text = colors.white, warning = colors.red},
    LOG_FILE = "gate_log.txt",
    MAX_VISIBLE_LINES = 13,
    EMERGENCY_IRIS_CLOSE = true,
    ADDRESS_MIN_LENGTH = 6,
    ADDRESS_MAX_LENGTH = 9,
    ADDRESS_PATTERN = "^[A-Z0-9]+$",
    AUTO_DIAL_ADDRESS = nil,
    PRE_DIAL_ADDRESS = false,
    LOCKDOWN_MODE = false,
    users = {},
    BLOCKED_ADDRESSES = {},
    RECOVERY_ENABLED = true,
    FUEL_MAX_1710 = 203842,
    FUEL_MAX_1122 = 200000,
    VERSION_MODE = "auto",
    ENCRYPTION_KEY = "Stargate2025"
}
currentUser = nil

localAddress = "Unknown"
gateStatus = "Disconnected"
irisState = false
dialAddress = "none"
incomingAddress = "none"
fuelGauge = 0
maxFuel = isVersion1122 and config.FUEL_MAX_1122 or config.FUEL_MAX_1710
fuelHistory = {}
secureStatus = "allclear"
currentPage = 1
scrollPos = 1
selectedIndex = 1
maxVisibleLines = nil
dialingAddress = ""
addressBook = {}
addressName = ""
addressCode = ""
lastDialedAddress = nil
recentAddresses = {}
searchQuery = ""
logEntries = {}
selectedUser = ""

function loadConfig()
    print("Checking environment...")
    if not peripheral then error("Peripheral API not available. Are you running this in ComputerCraft?") end
    if not fs then error("Filesystem API (fs) not available. Are you running this in ComputerCraft?") end
    if not os.time then print("Warning: os.time not available, using 'unknown' for timestamps") end
    if not textutils or not textutils.serialize then print("Warning: textutils.serialize not available, config saving may fail") end

    modemSide = config.MODEM_SIDE or "back"
    for i = 1, config.RETRY_ATTEMPTS do
        modem = peripheral.wrap(modemSide) or peripheral.find("modem")
        if modem then break end
        print("Attempt " .. i .. ": No modem found, retrying in " .. config.RETRY_DELAY .. " seconds...")
        sleep(config.RETRY_DELAY)
    end
    if not modem then error("No modem found on " .. modemSide .. " or any side after retries.") end
    logAction("Modem loaded on " .. modemSide)

    if fs.exists("dhd_config.txt") then
        local file = fs.open("dhd_config.txt", "r")
        if file then
            local loadedConfig = textutils.unserialize(file.readAll()) or {}
            file.close()
            mergeConfig(loadedConfig)
        else
            logAction("Failed to open dhd_config.txt for reading")
        end
    end
    validateConfig()
end

function saveConfig()
    if not textutils or not textutils.serialize then 
        logAction("Config save failed: textutils.serialize unavailable")
        return false 
    end
    local file = fs.open("dhd_config.txt", "w")
    if file then
        file.write(textutils.serialize(config))
        file.close()
        logAction("Config saved successfully")
        return true
    else
        logAction("Config save failed: Unable to open dhd_config.txt")
        return false
    end
end

function mergeConfig(loadedConfig)
    for k, v in pairs(loadedConfig) do
        if config[k] ~= nil then
            if type(v) == "table" and type(config[k]) == "table" then
                for subK, subV in pairs(v) do
                    config[k][subK] = subV
                end
            else
                config[k] = v
            end
        end
    end
end

function validateConfig()
    -- Validates and enforces config constraints
    local defaults = {
        FUEL_WARNING_THRESHOLD = {value = 20, type = "number", min = 0, max = 100},
        RETRY_ATTEMPTS = {value = 5, type = "number", min = 1, max = 10},
        RETRY_DELAY = {value = 2, type = "number", min = 0, max = 5},
        gateNames = {value = {}, type = "table"},
        gateGroups = {value = {}, type = "table"},
        gatePositions = {value = {}, type = "table", validate = function(t) 
            for _, pos in pairs(t) do 
                for k, v in pairs(pos) do 
                    if type(v) ~= "number" then return false end 
                end 
            end 
            return true 
        end},
        MODEM_SIDE = {value = "back", type = "string"},
        MAX_GATES = {value = 20, type = "number", min = 1, max = 50},
        SYNC_INTERVAL = {value = 0.5, type = "number", min = 0.1, max = 5},
        DIAL_WAIT = {value = 0.5, type = "number", min = 0.1, max = 2},
        DEFAULT_ADDRESSES = {value = {["Earth"] = {code = "ABC123", isTrusted = true, tag = "Allies"}}, type = "table"},
        MAX_RECENT_ADDRESSES = {value = 10, type = "number", min = 1, max = 20},
        UI_COLORS = {value = {borders = colors.blue, buttons = colors.blue, text = colors.white, warning = colors.red}, type = "table"},
        LOG_FILE = {value = "gate_log.txt", type = "string"},
        MAX_VISIBLE_LINES = {value = 13, type = "number", min = 5, max = 15},
        EMERGENCY_IRIS_CLOSE = {value = true, type = "boolean"},
        ADDRESS_MIN_LENGTH = {value = 6, type = "number", min = 1, max = 9},
        ADDRESS_MAX_LENGTH = {value = 9, type = "number", min = 6, max = 12},
        ADDRESS_PATTERN = {value = "^[A-Z0-9]+$", type = "string", validate = function(v) return pcall(function() "" :match(v) end) end},
        AUTO_DIAL_ADDRESS = {value = nil, type = "string", nullable = true},
        PRE_DIAL_ADDRESS = {value = false, type = "boolean"},
        LOCKDOWN_MODE = {value = false, type = "boolean"},
        users = {value = {}, type = "table"},
        BLOCKED_ADDRESSES = {value = {}, type = "table"},
        RECOVERY_ENABLED = {value = true, type = "boolean"},
        FUEL_MAX_1710 = {value = 203842, type = "number", min = 100000, max = 500000},
        FUEL_MAX_1122 = {value = 200000, type = "number", min = 100000, max = 500000},
        VERSION_MODE = {value = "auto", type = "string", options = {"auto", "1710", "1122"}},
        ENCRYPTION_KEY = {value = "Stargate2025", type = "string"}
    }

    for key, def in pairs(defaults) do
        if config[key] == nil or type(config[key]) ~= def.type or (def.validate and not def.validate(config[key])) then
            config[key] = def.value
            logAction("Reset invalid config key: " .. key .. " to default")
        elseif def.min and config[key] < def.min then
            config[key] = def.min
            logAction("Adjusted config key: " .. key .. " to minimum " .. def.min)
        elseif def.max and config[key] > def.max then
            config[key] = def.max
            logAction("Adjusted config key: " .. key .. " to maximum " .. def.max)
        elseif def.options and not table.contains(def.options, config[key]) then
            config[key] = def.value
            logAction("Reset invalid option for " .. key .. " to " .. def.value)
        elseif def.nullable and config[key] == nil then
            config[key] = nil
        end
    end
    maxFuel = isVersion1122 and config.FUEL_MAX_1122 or config.FUEL_MAX_1710
end

function table.contains(tbl, value)
    for _, v in pairs(tbl) do
        if v == value then return true end
    end
    return false
end