function initialSignup()
    term.clear()
    term.setCursorPos(1, 1)
    term.write("First-time setup: Create Admin Account")
    term.setCursorPos(1, 3)
    term.write("Username [admin]: ")
    local username = read() or "admin"
    term.setCursorPos(1, 4)
    term.write("Enter password or [R] for random: ")
    local passwordInput = readPassword("")
    if passwordInput == nil then passwordInput = "" end
    local password
    if passwordInput:lower() == "r" then
        password = generateRandomPassword(8)
        term.setCursorPos(1, 5)
        term.write("Generated password: " .. password)
        term.setCursorPos(1, 6)
        term.write("Write this down! Press Enter to continue.")
        os.pullEvent("key")
    else
        if passwordInput == "" then
            term.setCursorPos(1, 5)
            term.setTextColor(colors.red)
            term.write("Password cannot be empty. Try again.")
            term.setTextColor(colors.white)
            sleep(2)
            return initialSignup()
        end
        password = passwordInput
        term.setCursorPos(1, 5)
        term.write("Confirm password: ")
        local confirm = readPassword("")
        if password ~= confirm then
            term.setCursorPos(1, 7)
            term.setTextColor(colors.red)
            term.write("Passwords don’t match. Try again.")
            term.setTextColor(colors.white)
            sleep(2)
            return initialSignup()
        end
    end
    local hashedPassword = hashPassword(password)
    config.users = {[username] = {password = hashedPassword, role = "admin"}}
    saveConfig()
    local recoveryCode = generateRecoveryCode()
    saveRecoveryCode(recoveryCode)
    term.setCursorPos(1, 7)
    term.write("Recovery Code: " .. recoveryCode)
    term.setCursorPos(1, 8)
    term.write("Save this code somewhere safe!")
    logAction("Admin account created: " .. username)
    term.setCursorPos(1, 10)
    term.write("Setup complete! Login to continue.")
    sleep(2)
    return username
end

function recoverPassword()
    term.clear()
    term.setCursorPos(1, 1)
    term.write("Password Recovery")
    term.setCursorPos(1, 3)
    term.write("Enter recovery code: ")
    local input = read()
    local storedCode = loadRecoveryCode()
    if input == storedCode then
        term.setCursorPos(1, 5)
        term.write("Enter new password: ")
        local newPassword = readPassword("")
        term.setCursorPos(1, 6)
        term.write("Confirm new password: ")
        local confirm = readPassword("")
        if newPassword == confirm then
            config.users["admin"].password = hashPassword(newPassword)
            saveConfig()
            logAction("Password recovered and reset for admin")
            term.setCursorPos(1, 8)
            term.write("Password reset successfully!")
            sleep(2)
            return true
        else
            term.setCursorPos(1, 8)
            term.setTextColor(colors.red)
            term.write("Passwords don’t match!")
            term.setTextColor(colors.white)
            sleep(2)
            return false
        end
    else
        term.setCursorPos(1, 5)
        term.setTextColor(colors.red)
        term.write("Invalid recovery code!")
        term.setTextColor(colors.white)
        sleep(2)
        return false
    end
end

function checkPassword()
    local width = 49
    local username = ""
    local password = ""
    local enteringUsername = true
    logAction("Starting password check")
    drawPage("Login Required", {
        {text = string.rep("-", width), y = 3},
        {text = "Username: " .. username, y = 8, centered = true},
        {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
        {text = string.rep("-", width), y = 17},
        {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
    })

    if not fs.exists("dhd_config.txt") then
        currentUser = initialSignup()
        drawPage("Login Required", {
            {text = string.rep("-", width), y = 3},
            {text = "Username: " .. username, y = 8, centered = true},
            {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
            {text = string.rep("-", width), y = 17},
            {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
        })
    end

    while true do
        local event, param = os.pullEvent()
        if event == "key" then
            if param == keys.f12 and config.RECOVERY_ENABLED and not enteringUsername then
                if recoverPassword() then
                    return checkPassword()
                end
                drawPage("Login Required", {
                    {text = string.rep("-", width), y = 3},
                    {text = "Username: " .. username, y = 8, centered = true},
                    {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
                    {text = string.rep("-", width), y = 17},
                    {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
                })
            elseif param == keys.enter then
                if enteringUsername and username ~= "" then
                    enteringUsername = false
                    logAction("Username entered: " .. username)
                    drawPage("Login Required", {
                        {text = string.rep("-", width), y = 3},
                        {text = "Username: " .. username, y = 8, centered = true},
                        {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
                        {text = string.rep("-", width), y = 17},
                        {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
                    })
                elseif not enteringUsername and password ~= "" then
                    logAction("Password entered for: " .. username)
                    if config.users[username] and verifyPassword(password, config.users[username].password) then
                        currentUser = username
                        logAction("Login successful for " .. username)
                        updatePasswordPromptPage()
                        while true do
                            local e, p = os.pullEvent("key")
                            if p == keys.enter then
                                return true
                            elseif p == keys.c then
                                if handlePasswordChangeInput() then
                                    return true
                                end
                                updatePasswordPromptPage()
                            elseif p == keys.f1 then
                                return true
                            end
                        end
                    else
                        term.setCursorPos(math.floor((width - #"Wrong credentials!") / 2) + 2, 14)
                        term.setTextColor(config.UI_COLORS.warning)
                        term.write("Wrong credentials!")
                        term.setTextColor(config.UI_COLORS.text or colors.white)
                        logAction("Login failed for " .. username)
                        sleep(1)
                        drawPage("Login Required", {
                            {text = string.rep("-", width), y = 3},
                            {text = "Username: " .. username, y = 8, centered = true},
                            {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
                            {text = string.rep("-", width), y = 17},
                            {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
                        })
                    end
                end
            elseif param == keys.backspace then
                if enteringUsername and #username > 0 then
                    username = username:sub(1, -2)
                elseif not enteringUsername and #password > 0 then
                    password = password:sub(1, -2)
                end
                drawPage("Login Required", {
                    {text = string.rep("-", width), y = 3},
                    {text = "Username: " .. username, y = 8, centered = true},
                    {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
                    {text = string.rep("-", width), y = 17},
                    {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
                })
            elseif param == keys.f1 then
                logAction("Login aborted with F1")
                return false
            end
        elseif event == "char" then
            if enteringUsername then
                username = username .. param
            else
                password = password .. param
            end
            drawPage("Login Required", {
                {text = string.rep("-", width), y = 3},
                {text = "Username: " .. username, y = 8, centered = true},
                {text = "Password: " .. string.rep("*", #password), y = 10, centered = true},
                {text = string.rep("-", width), y = 17},
                {text = "[F12] Recover password", y = 12, centered = true, condition = function() return config.RECOVERY_ENABLED end}
            })
        end
    end
end

function hashPassword(password)
    -- Hashes password with a basic salt
    local salt = "xAIccDHD" -- Simple static salt
    local hash = 0
    local combined = salt .. password
    for i = 1, #combined do
        hash = (hash * 31 + combined:byte(i)) % 2^32
    end
    return tostring(hash)
end

function verifyPassword(input, storedHash)
    -- Verifies password against stored hash
    return hashPassword(input) == storedHash
end